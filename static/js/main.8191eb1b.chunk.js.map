{"version":3,"sources":["ProductData/productdata.module.css","App.module.css","ProductPreview/productpreview.module.css","amazonLogo.jpg","ProductPreview/productpreview.js","ProductData/productdata.js","backend.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProductPreview","props","CurrentHour","Date","getHours","CurrentMinute","getMinutes","className","styles","src","currentImage","alt","currentState","Time","HeartBeat","ProductData","colorOptions","data","map","item","pos","classArr","ProductImage","previewImagePos","push","SelectedProduct","join","imageUrl","styleName","onClick","onColorClick","key","selectedButton","featureList","mArr","FeatureItem","featurePos","SelectedFeatureItem","onButtonClick","title","details","description","SectionHeading","PrimaryButton","backend","Object","freeze","App","state","Backend","featureTimeState","setState","prevState","prevProps","Topbar","amazonLogo","width","MainContainer","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8191eb1b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProductData\":\"productdata_ProductData__1R0kk\",\"title\":\"productdata_title__3NypE\",\"details\":\"productdata_details__2yLlQ\",\"ProductImage\":\"productdata_ProductImage__3h80A\",\"SelectedProduct\":\"productdata_SelectedProduct__D4ORm\",\"SectionHeading\":\"productdata_SectionHeading__2BkyW\",\"FeatureItem\":\"productdata_FeatureItem__1fTpp\",\"SelectedFeatureItem\":\"productdata_SelectedFeatureItem__1e1fq\",\"PrimaryButton\":\"productdata_PrimaryButton__7B3kM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Topbar\":\"App_Topbar__1Q3UI\",\"MainContainer\":\"App_MainContainer__1inKv\",\"ProductPreview\":\"App_ProductPreview__Rtyhz\",\"ProductData\":\"App_ProductData__2qF2P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProductPreview\":\"productpreview_ProductPreview__26K8N\",\"Time\":\"productpreview_Time__62Ew7\",\"HeartBeat\":\"productpreview_HeartBeat__1Ppxj\",\"beat\":\"productpreview_beat__1LiWu\"};","module.exports = __webpack_public_path__ + \"static/media/amazonLogo.841a6d2a.jpg\";","import React from 'react';\r\nimport styles from './productpreview.module.css'\r\n\r\n\r\nconst ProductPreview=(props)=>{\r\n    const CurrentHour= new Date().getHours()>9?new Date().getHours():'0'+new Date().getHours();\r\n    const CurrentMinute= new Date().getMinutes()>9?new Date().getMinutes():'0'+new Date().getMinutes();\r\n    return(\r\n        \r\n    <div className={styles.ProductPreview}>\r\n     <img src={props.currentImage} alt='imagePreview'/>\r\n    \r\n      {props.currentState ?\r\n      <div className={styles.Time}>\r\n    <p>{`${CurrentHour}:${CurrentMinute}`}</p>\r\n    </div> :\r\n    <div className={styles.HeartBeat}>\r\n       <i className='fas fa-heartbeat'></i>\r\n       <p>78</p>\r\n    </div> }\r\n    \r\n    </div>\r\n    );\r\n}\r\nexport default ProductPreview;","import React from 'react';\r\nimport styles from './productdata.module.css';\r\n\r\n\r\nconst ProductData=(props)=>{\r\n\r\nconst colorOptions=props.data.colorOptions.map((item,pos)=>{\r\n  const classArr=[styles.ProductImage]\r\n  if(pos===props.previewImagePos){\r\n    classArr.push(styles.SelectedProduct)\r\n  }\r\n  return(\r\n    <img className={classArr.join(' ')} src={item.imageUrl} alt={item.styleName} onClick={()=>props.onColorClick(pos)}\r\n     key={pos}/>\r\n  )\r\n});\r\n\r\n\r\n\r\nconst selectedButton=props.data.featureList.map((item,pos)=>{\r\n  const mArr=[styles.FeatureItem];\r\n  if(pos===props.featurePos){\r\n  mArr.push(styles.SelectedFeatureItem)\r\n  }\r\n  return(\r\n    <button className={mArr.join(' ')} onClick={()=>props.onButtonClick(pos)} key={pos}>{item}</button>\r\n  )\r\n})\r\n\r\n    return(\r\n        <div className={styles.ProductData}>\r\n          <h1 className={styles.title}>{props.data.title}</h1>\r\n          <p className={styles.details}>{props.data.description}</p>\r\n          <h3 className={styles.SectionHeading}>Select Color</h3>\r\n          <div>\r\n            {colorOptions}\r\n          </div>\r\n          <h3 className={styles.SectionHeading}>Features</h3>\r\n          <div>  \r\n            {selectedButton}\r\n            \r\n          </div>\r\n          <button className={styles.PrimaryButton}>Buy Now</button>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ProductData;","const backend = {\r\n    title: 'FitBit 19 - The Smartest Watch',\r\n    description: 'Best quality digital watches which brings great enhance in your personality and makes everything good.',\r\n    colorOptions: [\r\n        {\r\n            styleName: 'Black Strap',\r\n            imageUrl: 'https://imgur.com/iOeUBV7.png'\r\n        },\r\n        { \r\n            styleName: 'Red Strap',\r\n            imageUrl: 'https://imgur.com/PTgQlim.png'\r\n        },\r\n        {\r\n            styleName: 'Blue Strap',\r\n            imageUrl: 'https://imgur.com/Mplj1YR.png'\r\n        },\r\n        {\r\n            styleName: 'Purple Strap',\r\n            imageUrl: 'https://imgur.com/xSIK4M8.png'\r\n        },\r\n    ],\r\n    featureList: [\r\n        \"Time\", \"Heart Rate\"\r\n    ]\r\n}\r\n\r\nObject.freeze(backend); //This line of code just makes your object as a constant. No values can be updated.\r\n\r\nexport default backend;","import React from 'react';\r\nimport amazonLogo from './amazonLogo.jpg';\r\nimport styles from './App.module.css';\r\nimport Productpreview from './ProductPreview/productpreview.js'\r\nimport ProductData from './ProductData/productdata.js';\r\nimport Backend from './backend'\r\n\r\n\r\n\r\nclass  App extends React.Component {\r\n\r\n  state={\r\n    backend: Backend,\r\n    previewImagePos:0,\r\n    featureTimeState: true,\r\n    featurePos:0\r\n  }\r\n\r\n  onColorClick=(pos)=>{\r\n    this.setState({previewImagePos: pos})\r\n  }\r\n\r\n  onButtonClick=(pos)=>{\r\n    this.setState((prevState,prevProps)=>{\r\n      return{\r\n      featurePos: pos,\r\n      featureTimeState: pos===prevState.featurePos ? prevState.featureTimeState : !prevState.featureTimeState}  \r\n  })\r\n  }\r\n\r\n  render(){\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <nav className={styles.Topbar}>\r\n        <img src={amazonLogo} alt='amazonLogo' width='10%' />\r\n\r\n     </nav>\r\n      </header> \r\n\r\n      <div className={styles.MainContainer}>\r\n        <div className={styles.ProductPreview}>\r\n        <Productpreview currentImage={this.state.backend.colorOptions[this.state.previewImagePos].imageUrl} currentState={this.state.featureTimeState} />\r\n        </div>\r\n          \r\n        <div className={styles.ProductData}>\r\n          <ProductData data={this.state.backend} onColorClick={this.onColorClick} previewImagePos={this.state.previewImagePos} onButtonClick={this.onButtonClick} \r\n          featurePos={this.state.featurePos}/>\r\n        </div>\r\n\r\n      </div>\r\n      </div>\r\n  \r\n  );}\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}